{"name":"Unit converter","tagline":"","body":"# Unit Converter\r\n\r\n## Command-Line Installation\r\n```bash\r\ncurl -s https://raw.githubusercontent.com/MichaelSnowden/unit_converter/master/install.sh | sh\r\n```\r\n\r\n## Command-Line Usage\r\n```bash\r\n$ unit_converter\r\nuc> 400 kg * 9.8 m/s^2\r\n3920 kg m s^-2\r\nuc> 3.9 N * 10 m\r\n39 kg m^2 s^-2\r\nuc> quit\r\n$\r\n```\r\n\r\n## Maven Integration\r\nAdd this to your `pom.xml`\r\n```xml\r\n<repositories>\r\n    <repository>\r\n        <id>jitpack.io</id>\r\n        <url>https://jitpack.io</url>\r\n    </repository>\r\n</repositories>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.github.MichaelSnowden</groupId>\r\n        <artifactId>unit_converter</artifactId>\r\n        <version>4e0b67e</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\nThen start with the `Calculator` class.\r\n\r\n```java\r\nCalculator calculator = new Calculator();\r\nconsole.println(calculator.calculate(line).toString());\r\n```\r\n\r\n[`com.michaelsnowden.unit_converter.REPL`](https://github.com/MichaelSnowden/unit_converter/blob/master/src/main/java/com/michaelsnowden/unit_converter/REPL.java) is a good place to look for an example usage.\r\n\r\nIf you want to add units (I haven't added them all), then try constructing the `Calculator` with your own `UnitsProvider`.\r\n\r\nHere is an example taken directly from a webiste I have which uses this repo.\r\n\r\n```java\r\nConnection connection = null;\r\nConnection connection = null;\r\ntry {\r\n    connection = DatabaseUrl.extract().getConnection();\r\n//                connection = DriverManager.getConnection(\"jdbc:sqlite:test.db\");\r\n\r\n    Statement stmt = connection.createStatement();\r\n    stmt.executeUpdate(\"CREATE TABLE IF NOT EXISTS base (si TEXT, sym TEXT, scalar REAL)\");\r\n    stmt.executeUpdate(\"CREATE TABLE IF NOT EXISTS comp (deriv TEXT, base TEXT, n INT , d INT)\");\r\n    if (!stmt.executeQuery(\"SELECT * FROM base\").next()) {\r\n        stmt.executeUpdate(\"INSERT INTO base VALUES ('kg', 'g', \" + 1 / 1000.0 + \")\");\r\n        stmt.executeUpdate(\"INSERT INTO base VALUES ('s', 'ms', \" + 1 / 1000.0 + \")\");\r\n        stmt.executeUpdate(\"INSERT INTO base VALUES ('ml', 'l', \" + 1 / 1000.0 + \")\");\r\n    }\r\n    if (!stmt.executeQuery(\"SELECT * FROM comp\").next()) {\r\n        stmt.executeUpdate(\"INSERT INTO comp VALUES ('N', 'kg', 1, 1)\");\r\n        stmt.executeUpdate(\"INSERT INTO comp VALUES ('N', 'm', 1, 1)\");\r\n        stmt.executeUpdate(\"INSERT INTO comp VALUES ('N', 's', -2, 1)\");\r\n    }\r\n\r\n    UnitsProvider unitsProvider = new UnitsProvider() {\r\n        @Override\r\n        public Map<String, Fraction> decompose(String s, Fraction fraction) {\r\n            try {\r\n                ResultSet resultSet;\r\n                resultSet = stmt.executeQuery(\"SELECT * FROM comp WHERE deriv = '\" + s + \"'\");\r\n                if (resultSet.next()) {\r\n                    Map<String, Fraction> decomposed = new HashMap<>();\r\n                    resultSet = stmt.executeQuery(\"SELECT base, n, d FROM comp WHERE deriv = \" +\r\n                            \"'\" + s + \"'\");\r\n                    while (resultSet.next()) {\r\n                        String base = resultSet.getString(\"base\");\r\n                        int n = resultSet.getInt(\"n\");\r\n                        int d = resultSet.getInt(\"d\");\r\n                        decomposed.put(base, new Fraction(n, d));\r\n                    }\r\n                    return decomposed;\r\n                } else {\r\n                    return new HashMap<String, Fraction>() {{\r\n                        put(s, fraction);\r\n                    }};\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                return new HashMap<String, Fraction>() {{\r\n                    put(s, fraction);\r\n                }};\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public Double conversionFactor(String s, Fraction fraction) {\r\n            try {\r\n                ResultSet set;\r\n                set = stmt.executeQuery(\"SELECT scalar FROM base WHERE sym = '\" + s + \"'\");\r\n                if (set.next()) {\r\n                    return set.getDouble(\"scalar\");\r\n                } else {\r\n                    return 1.0;\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                return 1.0;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public String conversionSymbol(String s) {\r\n            try {\r\n                ResultSet set;\r\n                set = stmt.executeQuery(\"SELECT si FROM base WHERE sym = '\" + s + \"'\");\r\n                if (set.next()) {\r\n                    return set.getString(\"si\");\r\n                } else {\r\n                    return s;\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                return s;\r\n            }\r\n        }\r\n    };\r\n\r\n    String expression = req.queryParams(\"expression\");\r\n    Calculator calculator = new Calculator(unitsProvider);\r\n    QualifiedNumber calculate = calculator.calculate(expression);\r\n    return calculate.toString();\r\n} catch (Exception ignored) {\r\n    return ignored.getMessage();\r\n} finally {\r\n    if (connection != null) try {\r\n        connection.close();\r\n    } catch (SQLException ignored) {\r\n\r\n    }\r\n}\r\n```\r\n\r\n## REST API (cURL)\r\n```javascript\r\n$ curl https://michael-snowden.herokuapp.com/calculate?expression=2kg%20%2B%202g\r\n2.002 kg\r\n```\r\n\r\n## REST API (jQuery)\r\n*This won't work on the GitHub page because of a security policy directive*\r\n```javascript\r\nvar expression = encodeURI(\"2kg * 3 N^2\");\r\n$.get(\"https://michael-snowden.herokuapp.com/calculate?expression=\" + expression, function (data) {\r\n    console.log(data);\r\n});\r\n```\r\n\r\n## Future Ideas\r\nAPI method for adding unit conversions\r\n\r\n### Authors and Contributors\r\nMichael Snowden (@MichaelSnowden)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}